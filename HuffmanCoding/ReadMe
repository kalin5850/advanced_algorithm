This homework has 6 .java files that I have implemented by myself
: Homework5.java, Encoding.java, Decoding.java, CharFrequency.java,
HunffmanTree.java, and HuffmanNode.java.
 
 First, the Homework5.java includes main function. When typing
 java Homework5.java -h Hamlet.txt, the program is going to generate
 Huffman.txt.huf, which is a compreesed file. Compared to the original 
 file's size, 196848 bits, the Huffman.txt.huf file is 111022 bits; 
 seconde, when typing java Homework5.java -i Huffman.txt.huf, it is going 
 to generate Huffman.txt. However, when doing reverse Huffman code, the 
 program takes a while for running. 
 
The encoding implement detail is following: 
 	First, CharFrequency.java is to count each character of Hamlet and
 	save the result into HashMap<Integer,Integer> object. In this .java
 	file, there are two constructors: the first one is for when decoding, 
 	another one is for encoding. In addition, I offer a method, toString,
 	printing the frequency of each character, as showing below. The first 
 	column is decimal number in the Ascii table, the second column is the 
 	frequency of each character, and the last column is Char.  
 		10 : 4940  	
		34 : 1  	"
		32 : 48217  	 
		33 : 373  	!
		38 : 1  	&
		39 : 1202  	'
		40 : 64  	(
		41 : 63  	)
		46 : 3173  	.
		44 : 3032  	,
		45 : 308  	-
		51 : 10  	3
		50 : 10  	2
		49 : 37  	1
		48 : 11  	0
		54 : 1  	6
		52 : 1  	4
		59 : 442  	;
		58 : 32  	:
		57 : 40  	9
		63 : 452  	?
		62 : 20  	>
		60 : 20  	<
		68 : 303  	D
		69 : 700  	E
		70 : 261  	F
		71 : 310  	G
		65 : 853  	A
		66 : 382  	B
		67 : 377  	C
		76 : 429  	L
		77 : 382  	M
		78 : 390  	N
		79 : 726  	O
		72 : 1013  	H
		73 : 1214  	I
		74 : 19  	J
		75 : 200  	K
		85 : 136  	U
		84 : 1033  	T
		87 : 537  	W
		86 : 73  	V
		81 : 112  	Q
		80 : 347  	P
		83 : 514  	S
		82 : 499  	R
		93 : 112  	]
		89 : 240  	Y
		88 : 10  	X
		91 : 116  	[
		102 : 2502  	f
		103 : 2171  	g
		100 : 4895  	d
		101 : 14734  	e
		98 : 1568  		b
		99 : 2431  		c
		97 : 9323  		a
		110 : 8120  	n
		111 : 10849  	o
		108 : 5602  	l
		109 : 4005  	m
		106 : 101  		j
		107 : 1095  	k
		104 : 7843  	h
		105 : 7661  	i
		119 : 2647  	w
		118 : 1189  	v
		117 : 4307  	u
		116 : 11078  	t
		115 : 8129  	s
		114 : 7643  	r
		113 : 108  		q
		112 : 1782  	p
		122 : 72  		z
		121 : 3075  	y
		120 : 180  		x
		
	When finishing counting frequency, the HuffmanTree.java is going to 
	produce Huffman Code. I use PriorityQueue<HuffmanNode> to construct a
	Huffman Tree doing at createTree() method, and the BuildCode method is
	to get Huffman Code by using recursive call. The idea is that the Ascill
	Table size is 256, so I use a string array with size 256. Whenever hitting
	the the leaf, the Huffman code is stored into a string array. The result
	is showing below by using toString method:
		Ascii: 		code: 11001----code.length: 5
		Ascii:   	code: 01----code.length: 2
		Ascii: ! 	code: 110000001----code.length: 9
		Ascii: " 	code: 1111111111110111----code.length: 16
		Ascii: & 	code: 1111111111110110----code.length: 16
		Ascii: ' 	code: 1111010----code.length: 7
		Ascii: ( 	code: 11110011111----code.length: 11
		Ascii: ) 	code: 11111111110----code.length: 11
		Ascii: , 	code: 100101----code.length: 6
		Ascii: - 	code: 111100101----code.length: 9
		Ascii: . 	code: 100010----code.length: 6
		Ascii: 0 	code: 1111111111111----code.length: 13
		Ascii: 1 	code: 111100111001----code.length: 12
		Ascii: 2 	code: 11110011100001----code.length: 14
		Ascii: 3 	code: 11111111111100----code.length: 14
		Ascii: 4 	code: 1111111111110100----code.length: 16
		Ascii: 6 	code: 1111111111110101----code.length: 16
		Ascii: 9 	code: 110000100010----code.length: 12
		Ascii: : 	code: 111111111110----code.length: 12
		Ascii: ; 	code: 100001100----code.length: 9
		Ascii: < 	code: 1100001000110----code.length: 13
		Ascii: > 	code: 1100001000111----code.length: 13
		Ascii: ? 	code: 100000111----code.length: 9
		Ascii: A 	code: 10000111----code.length: 8
		Ascii: B 	code: 100011010----code.length: 9
		Ascii: C 	code: 110000000----code.length: 9
		Ascii: D 	code: 111100110----code.length: 9
		Ascii: E 	code: 11000011----code.length: 8
		Ascii: F 	code: 111111110----code.length: 9
		Ascii: G 	code: 111100100----code.length: 9
		Ascii: H 	code: 10000001----code.length: 8
		Ascii: I 	code: 1111000----code.length: 7
		Ascii: J 	code: 1111001110001----code.length: 13
		Ascii: K 	code: 1000110001----code.length: 10
		Ascii: L 	code: 100001101----code.length: 9
		Ascii: M 	code: 100011011----code.length: 9
		Ascii: N 	code: 100011001----code.length: 9
		Ascii: O 	code: 11000001----code.length: 8
		Ascii: P 	code: 110000101----code.length: 9
		Ascii: Q 	code: 10001100000----code.length: 11
		Ascii: R 	code: 100000101----code.length: 9
		Ascii: S 	code: 100000100----code.length: 9
		Ascii: T 	code: 10000000----code.length: 8
		Ascii: U 	code: 1111111110----code.length: 10
		Ascii: V 	code: 11110011101----code.length: 11
		Ascii: W 	code: 11111110----code.length: 8
		Ascii: X 	code: 11110011100000----code.length: 14
		Ascii: Y 	code: 1000001100----code.length: 10
		Ascii: [ 	code: 10000011010----code.length: 11
		Ascii: ] 	code: 10000011011----code.length: 11
		Ascii: a 	code: 1110----code.length: 4
		Ascii: b 	code: 1000111----code.length: 7
		Ascii: c 	code: 110101----code.length: 6
		Ascii: d 	code: 11011----code.length: 5
		Ascii: e 	code: 0011----code.length: 4
		Ascii: f 	code: 110100----code.length: 6
		Ascii: g 	code: 111110----code.length: 6
		Ascii: h 	code: 00011----code.length: 5
		Ascii: i 	code: 00100----code.length: 5
		Ascii: j 	code: 11000010000----code.length: 11
		Ascii: k 	code: 1111110----code.length: 7
		Ascii: l 	code: 10011----code.length: 5
		Ascii: m 	code: 000001----code.length: 6
		Ascii: n 	code: 00010----code.length: 5
		Ascii: o 	code: 1011----code.length: 4
		Ascii: p 	code: 1000010----code.length: 7
		Ascii: q 	code: 10001100001----code.length: 11
		Ascii: r 	code: 00101----code.length: 5
		Ascii: s 	code: 00001----code.length: 5
		Ascii: t 	code: 1010----code.length: 4
		Ascii: u 	code: 000000----code.length: 6
		Ascii: v 	code: 1111011----code.length: 7
		Ascii: w 	code: 110001----code.length: 6
		Ascii: x 	code: 1100001001----code.length: 10
		Ascii: y 	code: 100100----code.length: 6
		Ascii: z 	code: 11110011110----code.length: 11   		
 
 	Finally, the Ecoding.java is to write a binary file with a preamble,
 	which is the all frequency of characters, and compression. 
 	Once, getting Huffman Code, I read each character from Hamlet
 	and get Huffman code from BuildCode method. The first 4 bytes is the size 
 	of preamble that is for decoding to re-build Huffman Table because each
 	one has different tables. And, I write a byte for each character and int,
 	which is 4 bytes, is for frequency. Furthermore, the compression is
 	compressed by each 8 bits, which is at writeBits method. The StringToInt
 	method is to switch int into String.
 	
 The decoding implement detail as following:
 	First, the Decoding.java is to read Hamlet.txt.huf to re-build the HuffmanTree
 	and preamble.I have HashMap<String,Integer> object named decodeTable to store
 	the Huffmand code and the value of a character. The decode method and getValue
 	method is going to recursively read each byte. The idea is that if a byte has 
 	more than one character, I generate that character, and I combine the rest bits,
 	which is at buffer, with next byte. If the total length buffer and a byte is
 	less than the Huffman code, I combine one more byte.
 	
 Conclusion:
 	I have implemented these 6 .java for Huffman encoding and decoding. The result
 	of compressing size is about 111022 bits that is less than the original file,
 	196848 bits. Furthermore, when decompressing the binary file, why it roughly 
 	takes about 20 seconds, and there is an Exception because the last byte.
 